{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["import { IRoomListingData, MatchMakerDriver, QueryHelpers, RoomListingData, debugDriver } from '@colyseus/core';\nimport mongoose, { Document, Schema } from 'mongoose';\n\nconst RoomCacheSchema: Schema = new Schema({\n  clients: { type: Number, default: 0 },\n  locked: { type: Boolean, default: false },\n  maxClients: { type: Number, default: Infinity },\n  metadata: Schema.Types.Mixed,\n  name: String,\n  private: { type: Boolean, default: false },\n  publicAddress: String,\n  processId: String,\n  roomId: String,\n  unlisted: { type: Boolean, default: false }, // used for default LobbyRoom (prevent from showing up on room listing)\n}, {\n  strict: false,\n  timestamps: true,\n  versionKey: false,\n});\n\nRoomCacheSchema.index({ name: 1, locked: -1 });\nRoomCacheSchema.index({ roomId: 1 });\n\nconst RoomCache = mongoose.model<Document>('RoomCache', RoomCacheSchema);\n\nexport class MongooseDriver implements MatchMakerDriver {\n\n  constructor(connectionURI?: string) {\n\n    if (mongoose.connection.readyState === mongoose.STATES.disconnected) {\n      connectionURI = connectionURI || process.env.MONGO_URI || 'mongodb://127.0.0.1:27017/colyseus';\n\n      mongoose.connect(connectionURI, {\n        autoIndex: true,\n        useCreateIndex: true,\n        useFindAndModify: true,\n        useNewUrlParser: true,\n        useUnifiedTopology: true,\n      });\n\n      debugDriver(\"\uD83D\uDDC4\uFE0F Connected to\", connectionURI);\n    }\n  }\n\n  public createInstance(initialValues: any = {}) {\n    return (new RoomCache(initialValues) as any) as RoomListingData;\n  }\n\n  public async has(roomId: string) {\n    return !!(await RoomCache.findOne({ roomId }));\n  };\n\n  public async find(conditions: Partial<IRoomListingData>, additionalProjectionFields = {}) {\n    return (await RoomCache.find(conditions, {\n      _id: false,\n      clients: true,\n      createdAt: true,\n      locked: true,\n      maxClients: true,\n      metadata: true,\n      name: true,\n      roomId: true,\n      ...additionalProjectionFields,\n    })) as any as RoomListingData[];\n  }\n\n  public findOne(conditions: Partial<IRoomListingData>) {\n    return (RoomCache.findOne(conditions, {\n      _id: 0,\n    })) as any as QueryHelpers<RoomListingData>;\n  }\n\n  public async clear() {\n    await RoomCache.deleteMany({});\n  }\n\n  public async shutdown() {\n    await mongoose.disconnect();\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAA+F;AAC/F,sBAA2C;AAE3C,MAAM,kBAA0B,IAAI,uBAAO;AAAA,EACzC,SAAS,EAAE,MAAM,QAAQ,SAAS,EAAE;AAAA,EACpC,QAAQ,EAAE,MAAM,SAAS,SAAS,MAAM;AAAA,EACxC,YAAY,EAAE,MAAM,QAAQ,SAAS,SAAS;AAAA,EAC9C,UAAU,uBAAO,MAAM;AAAA,EACvB,MAAM;AAAA,EACN,SAAS,EAAE,MAAM,SAAS,SAAS,MAAM;AAAA,EACzC,eAAe;AAAA,EACf,WAAW;AAAA,EACX,QAAQ;AAAA,EACR,UAAU,EAAE,MAAM,SAAS,SAAS,MAAM;AAC5C,GAAG;AAAA,EACD,QAAQ;AAAA,EACR,YAAY;AAAA,EACZ,YAAY;AACd,CAAC;AAED,gBAAgB,MAAM,EAAE,MAAM,GAAG,QAAQ,GAAG,CAAC;AAC7C,gBAAgB,MAAM,EAAE,QAAQ,EAAE,CAAC;AAEnC,MAAM,YAAY,gBAAAA,QAAS,MAAgB,aAAa,eAAe;AAEhE,MAAM,eAA2C;AAAA,EAEtD,YAAY,eAAwB;AAElC,QAAI,gBAAAA,QAAS,WAAW,eAAe,gBAAAA,QAAS,OAAO,cAAc;AACnE,sBAAgB,iBAAiB,QAAQ,IAAI,aAAa;AAE1D,sBAAAA,QAAS,QAAQ,eAAe;AAAA,QAC9B,WAAW;AAAA,QACX,gBAAgB;AAAA,QAChB,kBAAkB;AAAA,QAClB,iBAAiB;AAAA,QACjB,oBAAoB;AAAA,MACtB,CAAC;AAED,mCAAY,gCAAoB,aAAa;AAAA,IAC/C;AAAA,EACF;AAAA,EAEO,eAAe,gBAAqB,CAAC,GAAG;AAC7C,WAAQ,IAAI,UAAU,aAAa;AAAA,EACrC;AAAA,EAEA,MAAa,IAAI,QAAgB;AAC/B,WAAO,CAAC,CAAE,MAAM,UAAU,QAAQ,EAAE,OAAO,CAAC;AAAA,EAC9C;AAAA,EAEA,MAAa,KAAK,YAAuC,6BAA6B,CAAC,GAAG;AACxF,WAAQ,MAAM,UAAU,KAAK,YAAY;AAAA,MACvC,KAAK;AAAA,MACL,SAAS;AAAA,MACT,WAAW;AAAA,MACX,QAAQ;AAAA,MACR,YAAY;AAAA,MACZ,UAAU;AAAA,MACV,MAAM;AAAA,MACN,QAAQ;AAAA,MACR,GAAG;AAAA,IACL,CAAC;AAAA,EACH;AAAA,EAEO,QAAQ,YAAuC;AACpD,WAAQ,UAAU,QAAQ,YAAY;AAAA,MACpC,KAAK;AAAA,IACP,CAAC;AAAA,EACH;AAAA,EAEA,MAAa,QAAQ;AACnB,UAAM,UAAU,WAAW,CAAC,CAAC;AAAA,EAC/B;AAAA,EAEA,MAAa,WAAW;AACtB,UAAM,gBAAAA,QAAS,WAAW;AAAA,EAC5B;AACF;",
  "names": ["mongoose"]
}
